import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;
import java.text.SimpleDateFormat;
import java.util.Date;

public class UserInfo extends Thread{
	
		private InputStream is;
		private OutputStream os;
		private DataInputStream dis;
		private DataOutputStream dos;

		private Socket socket;
		private Vector vector;

		private String name;

		UserInfo(Socket socket, Vector vector,String name)
		{
			// 매개변수로 넘어온 자료 저장
			this.socket =socket;
			this.vector=vector;
			this.name=name;
		
			
			try {
				is = socket.getInputStream();
				dis = new DataInputStream(is);
				os = socket.getOutputStream();
				dos = new DataOutputStream(os);
				show_connection(name);

			} catch (Exception e) {
			
			}
		}
		public void show_connection(String name)
		{
			for (int i = 0; i < vector.size(); i++) {
				UserInfo temp = (UserInfo) vector.elementAt(i);
				try {
					temp.dos.writeUTF(name + " is connect"); //server->client
				} 
				catch (IOException e) {
					//message X
				}
			}			
		}
		public void show_message(String msg) {
			for (int i = 0; i < vector.size(); i++) {
				UserInfo temp = (UserInfo) vector.elementAt(i);
				try {
					temp.dos.writeUTF(getTime() + " " + name +" :"+msg); //server->client
			
				}
				catch (IOException e) {
					//message X
				}
			}
		}
		public void run() {
			while (true) {
				try {
					String msg = dis.readUTF(); //client->server
					show_message(msg); //server->client
				} 
				catch (IOException e) 
				{
					try {
						dos.close();
						dis.close();
						socket.close();
						vector.removeElement(this);
						break;
					} catch (Exception ex) {
					
					}
				}
			}
		}
		static String getTime() {
			SimpleDateFormat f = new SimpleDateFormat("[hh:mm:ss]");
			return f.format(new Date());
		} // getTime	
}
